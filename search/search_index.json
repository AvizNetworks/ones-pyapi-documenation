{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview ONES APIs Aviz ONES is the industry's first multi-vendor platform which provides seamless network orchestration and monitoring capabilities. From storing the physical topology, device health, utilization and network events, it also provides network orchestration/automation for the data center fabric deployments. All this fleet-wide data is provided to the network administrators using standardized ONES APIs. ONES Provides a smooth transition for Network Admin for SONiC transition depending on the consumption model. ONES APIs supports following interfaces - gNMI (Secured using certificates) - REST API (Secured using user tokens)","title":"Home"},{"location":"#overview","text":"","title":"Overview"},{"location":"#ones-apis","text":"Aviz ONES is the industry's first multi-vendor platform which provides seamless network orchestration and monitoring capabilities. From storing the physical topology, device health, utilization and network events, it also provides network orchestration/automation for the data center fabric deployments. All this fleet-wide data is provided to the network administrators using standardized ONES APIs. ONES Provides a smooth transition for Network Admin for SONiC transition depending on the consumption model. ONES APIs supports following interfaces - gNMI (Secured using certificates) - REST API (Secured using user tokens)","title":"ONES APIs"},{"location":"Installation/","text":"Installation Please follow the below steps to install ONES PyAPI client and use Day1, Day2 and NetOPs APIs with single function call. Prerequisites python 3.9 and above pip 21.2.4 and above download ones-pyapi-1.0.0.tar.gz package from here Install package pip install ones-pyapi-1.0.0.tar.gz if above command not worked, tried with pip3 pip3 install ones-pyapi-1.0.0.tar.gz Now you can import and use it, please refer below examples for more details. - link or go to folder structure from left navigation. If something went wrong. or Expecting new features, let us know - here","title":"Installation"},{"location":"Installation/#installation","text":"Please follow the below steps to install ONES PyAPI client and use Day1, Day2 and NetOPs APIs with single function call.","title":"Installation"},{"location":"Installation/#prerequisites","text":"python 3.9 and above pip 21.2.4 and above download ones-pyapi-1.0.0.tar.gz package from here","title":"Prerequisites"},{"location":"Installation/#install-package","text":"pip install ones-pyapi-1.0.0.tar.gz if above command not worked, tried with pip3 pip3 install ones-pyapi-1.0.0.tar.gz Now you can import and use it, please refer below examples for more details. - link or go to folder structure from left navigation. If something went wrong. or Expecting new features, let us know - here","title":"Install package"},{"location":"ONES_Intregartion_with_prometheus/","text":"ONES Integration with Prometheus Steps for Integrate ONES with Prometheus Copy queries.yml, prometheus.yml provided in the repo to an appropriate folder Spawn dockers using docker-compose.yml This should bring up the prometheus web server at http://127.0.0.1:9090 and pull the metrics collected by ONES in few minutes This utilizes ports 9090 & 9187. These ports should be available for this solution to work. The data will be up in few minutes. Integrated ONES with Prometheus - Screenshot","title":"ONES Integration with Prometheus"},{"location":"ONES_Intregartion_with_prometheus/#ones-integration-with-prometheus","text":"","title":"ONES Integration with Prometheus"},{"location":"ONES_Intregartion_with_prometheus/#steps-for-integrate-ones-with-prometheus","text":"Copy queries.yml, prometheus.yml provided in the repo to an appropriate folder Spawn dockers using docker-compose.yml This should bring up the prometheus web server at http://127.0.0.1:9090 and pull the metrics collected by ONES in few minutes This utilizes ports 9090 & 9187. These ports should be available for this solution to work. The data will be up in few minutes.","title":"Steps for Integrate ONES with Prometheus"},{"location":"ONES_Intregartion_with_prometheus/#integrated-ones-with-prometheus-screenshot","text":"","title":"Integrated ONES with Prometheus - Screenshot"},{"location":"Ones_API_For_Network_Telemetry/Overview/","text":"Overview ONES Telemetry APIs primarily help with integration of following use cases Streaming real time raw-metrics via gRPC + OpenConfig Models API driven model for NetOps integration replacing SNMP","title":"Overview"},{"location":"Ones_API_For_Network_Telemetry/Overview/#overview","text":"ONES Telemetry APIs primarily help with integration of following use cases Streaming real time raw-metrics via gRPC + OpenConfig Models API driven model for NetOps integration replacing SNMP","title":"Overview"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/","text":"Capacity Import Client from restclient.telemetry.client import ONESClient Initialize client conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect() IPV4 Utilization Capacity based on the latest telemetry for ipv4_routes used and available. query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_ipv4_utilization(query_params) IPV6 Utilization Capacity based on the latest telemetry for ipv6_routes used and available. query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_ipv6_utilization(query_params) ACL Utilization Number of Total ACL capacity and it's usage in percentage query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_acl_utilization(query_params)","title":"Capacity"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#capacity","text":"","title":"Capacity"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#import-client","text":"from restclient.telemetry.client import ONESClient","title":"Import Client"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#initialize-client","text":"conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect()","title":"Initialize client"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#ipv4-utilization","text":"Capacity based on the latest telemetry for ipv4_routes used and available. query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_ipv4_utilization(query_params)","title":"IPV4 Utilization"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#ipv6-utilization","text":"Capacity based on the latest telemetry for ipv6_routes used and available. query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_ipv6_utilization(query_params)","title":"IPV6 Utilization"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Capacity/#acl-utilization","text":"Number of Total ACL capacity and it's usage in percentage query_params = { \"ipAddress\": \"10.x.x.x\" } res = conn.get_acl_utilization(query_params)","title":"ACL Utilization"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Health/","text":"Health Importing module # Importing module from restclient.telemetry.client import ONESClient Initializing client conn = ONESClient(url ='https://10.x.x.x', username=\"YOUR_USERNAME\", password=\"YOUR_PASSWORD\") conn.connect() Calling Methods Please Note, You can pass device_address or ip_address, both will work. CPU Utilization Timeseries data for CPU utilization for a given device. print(\"CPU_UTILIZATION\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_cpu_utilization(query_params)) ### Memory Utilization Timeseries data for Memory utilization for a given device. print(\"MEMORY_UTILIZATION\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_memory_utilization(query_params)) ### CPU Core Temperature Timeseries data for CPU cores temprature for a given device. print(\"CPU_CORE_TEMPERATURE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_cpu_core_temperaure(query_params)) ### PSU Temperature Timeseries data of the temperature of PSUs for a given device. print(\"PSU_TEMPERATURE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_temperature(query_params)) ### PSU Voltage Timeseries data of voltage readings on PSU for a given device. print(\"PSU_VOLTAGE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_voltage(query_params)) ### PSU Current Timeseries data of current readings on PSU for a given device. print(\"PSU_CURRENT\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_current(query_params)) ### Fan Speed Timeseries data for speed across all fans related to a device. print(\"FAN_SPEED\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_fan_speed(query_params)) ### PSU Power Timeseries data of power readings on PSU for a given device. print(\"PSU_POWER\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_power(query_params)) ### HEALTH SERVICES CPU Timeseries data for CPU utilization across services for a given device print(\"HEALTH_SERVICES_CPU\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_services_cpu(query_params)) ### HEALTH SERVICES MEMORY Timeseries data for Memory utilization across services for a given device print(\"HEALTH_SERVICES_MEMORY\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_services_memory(query_params)) ### Health BGP Neighbors Timeseries data of count of up and down status for bgp neighbours. print(\"HEALTH_BGP NEIGHBORS\") query_params = { \"fromDate\" : \"2023-04-04 04:54:27\", \"toDate\" : \"2023-04-04 05:54:27\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_bgp_neighbors(query_params)) ### Health Transcievers Timeseries data for transceiver connected to selected port. ( Rx/Tx power, temperature & Voltage). print(\"HEALTH_TRANSCIEVERS\") query_params = { \"ipAddress\" : \"10.x.x.x\", \"ifName\" : \"Ethernet0\", \"fromDate\" : \"2023-06-26 10:48:55\", \"toDate\" : \"2023-06-26 11:48:55\" } print(conn.get_health_trancievers(query_params)) ### Health Running Services Timeseries data of number of services running for a given device. print(\"HEALTH_RUNNING_SERVICES\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_running_services(query_params))","title":"Health"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Health/#health","text":"","title":"Health"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Health/#importing-module","text":"# Importing module from restclient.telemetry.client import ONESClient","title":"Importing module"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Health/#initializing-client","text":"conn = ONESClient(url ='https://10.x.x.x', username=\"YOUR_USERNAME\", password=\"YOUR_PASSWORD\") conn.connect() Calling Methods Please Note, You can pass device_address or ip_address, both will work.","title":"Initializing client"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Health/#cpu-utilization","text":"Timeseries data for CPU utilization for a given device. print(\"CPU_UTILIZATION\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_cpu_utilization(query_params)) ### Memory Utilization Timeseries data for Memory utilization for a given device. print(\"MEMORY_UTILIZATION\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_memory_utilization(query_params)) ### CPU Core Temperature Timeseries data for CPU cores temprature for a given device. print(\"CPU_CORE_TEMPERATURE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_cpu_core_temperaure(query_params)) ### PSU Temperature Timeseries data of the temperature of PSUs for a given device. print(\"PSU_TEMPERATURE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_temperature(query_params)) ### PSU Voltage Timeseries data of voltage readings on PSU for a given device. print(\"PSU_VOLTAGE\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_voltage(query_params)) ### PSU Current Timeseries data of current readings on PSU for a given device. print(\"PSU_CURRENT\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_current(query_params)) ### Fan Speed Timeseries data for speed across all fans related to a device. print(\"FAN_SPEED\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_fan_speed(query_params)) ### PSU Power Timeseries data of power readings on PSU for a given device. print(\"PSU_POWER\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_psu_power(query_params)) ### HEALTH SERVICES CPU Timeseries data for CPU utilization across services for a given device print(\"HEALTH_SERVICES_CPU\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_services_cpu(query_params)) ### HEALTH SERVICES MEMORY Timeseries data for Memory utilization across services for a given device print(\"HEALTH_SERVICES_MEMORY\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_services_memory(query_params)) ### Health BGP Neighbors Timeseries data of count of up and down status for bgp neighbours. print(\"HEALTH_BGP NEIGHBORS\") query_params = { \"fromDate\" : \"2023-04-04 04:54:27\", \"toDate\" : \"2023-04-04 05:54:27\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_bgp_neighbors(query_params)) ### Health Transcievers Timeseries data for transceiver connected to selected port. ( Rx/Tx power, temperature & Voltage). print(\"HEALTH_TRANSCIEVERS\") query_params = { \"ipAddress\" : \"10.x.x.x\", \"ifName\" : \"Ethernet0\", \"fromDate\" : \"2023-06-26 10:48:55\", \"toDate\" : \"2023-06-26 11:48:55\" } print(conn.get_health_trancievers(query_params)) ### Health Running Services Timeseries data of number of services running for a given device. print(\"HEALTH_RUNNING_SERVICES\") query_params = { \"fromDate\" : \"2023-05-12 11:55:24\", \"toDate\" : \"2023-05-12 12:55:24\", \"deviceAddress\" : \"10.x.x.x\" } print(conn.get_health_running_services(query_params))","title":"CPU Utilization"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/","text":"Inventory Import Client from restclient.telemetry.client import ONESClient <b Initialize client </b conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect() Device Info Get list of devices based on specific filters (SKU, Vendor, ASIC) res = conn.get_hardware_info() Get Roles Count of devices in different roles i.e., Leaf/Spine/etc., res = conn.get_roles() Switch SKUs Get a count & percentage distribution of Switch SKU's across fabric. res = conn.get_switch_skus() Get ASICs Get a count & percentage distribution of Asic's across fabric. res = conn.get_asics_info() Agent Versions Get a count & percentage distribution of ONES's agent version(Telemetry and Orchestrator) across fabric. res = conn.get_agent_version() NOS Versions Get a count & percentage distribution of device's NOS versions across fabric. res = conn.get_nos_version() Linux Versions Get a count & percentage distribution of device's kernel versions across fabric. res = conn.get_linux_version() ONIE Versions Get a count & percentage distribution of device's ONIE's versions accross fabric. res = conn.get_onie_version() Cables Get a count & percentage distribution & count of Cables used across fabric, also lists count of cables needed for unused port. res = conn.get_cable_info() Device Peripherals Provides device's Fan and PSU hardware information. query_params = {\"deviceAddress\": \"0c:xx:xx:xx:xx:x0\"} res = conn.get_device_peripherals(query_params) Device Interfaces Provides Interface information e.g., name, alias, transcievers specific details, etc. of a device payload = { \"filter\": { \"deviceAddress\": \"0c:xx:xx:xx:xx:x0\" } } res = conn.get_device_interfaces(payload)","title":"Inventory"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#inventory","text":"Import Client from restclient.telemetry.client import ONESClient <b Initialize client </b conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect()","title":"Inventory"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#device-info","text":"Get list of devices based on specific filters (SKU, Vendor, ASIC) res = conn.get_hardware_info()","title":"Device Info"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#get-roles","text":"Count of devices in different roles i.e., Leaf/Spine/etc., res = conn.get_roles()","title":"Get Roles"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#switch-skus","text":"Get a count & percentage distribution of Switch SKU's across fabric. res = conn.get_switch_skus()","title":"Switch SKUs"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#get-asics","text":"Get a count & percentage distribution of Asic's across fabric. res = conn.get_asics_info()","title":"Get ASICs"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#agent-versions","text":"Get a count & percentage distribution of ONES's agent version(Telemetry and Orchestrator) across fabric. res = conn.get_agent_version()","title":"Agent Versions"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#nos-versions","text":"Get a count & percentage distribution of device's NOS versions across fabric. res = conn.get_nos_version()","title":"NOS Versions"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#linux-versions","text":"Get a count & percentage distribution of device's kernel versions across fabric. res = conn.get_linux_version()","title":"Linux Versions"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#onie-versions","text":"Get a count & percentage distribution of device's ONIE's versions accross fabric. res = conn.get_onie_version()","title":"ONIE Versions"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#cables","text":"Get a count & percentage distribution & count of Cables used across fabric, also lists count of cables needed for unused port. res = conn.get_cable_info()","title":"Cables"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#device-peripherals","text":"Provides device's Fan and PSU hardware information. query_params = {\"deviceAddress\": \"0c:xx:xx:xx:xx:x0\"} res = conn.get_device_peripherals(query_params)","title":"Device Peripherals"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Inventory/#device-interfaces","text":"Provides Interface information e.g., name, alias, transcievers specific details, etc. of a device payload = { \"filter\": { \"deviceAddress\": \"0c:xx:xx:xx:xx:x0\" } } res = conn.get_device_interfaces(payload)","title":"Device Interfaces"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Topology/","text":"Topology Provides entire topology (device, link & layer Information) dump. NETWORK_TOPOLOGY_INFO Import Client from restclient.telemetry.client import ONESClient Initialize client conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect() Topology Calling Method for getting topology dumop topology_details = conn.get_network_topology() print(topology_details)","title":"Topology"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Topology/#topology","text":"Provides entire topology (device, link & layer Information) dump.","title":"Topology"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Topology/#network_topology_info","text":"Import Client from restclient.telemetry.client import ONESClient Initialize client conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect()","title":"NETWORK_TOPOLOGY_INFO"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Topology/#topology_1","text":"Calling Method for getting topology dumop topology_details = conn.get_network_topology() print(topology_details)","title":"Topology"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Traffic/","text":"Traffic Import Client from restclient.telemetry.client import ONESClient Initialize client conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect() Traffic Counters Timeseries data of Average count of In/out packets & Total count of errors & discards of Interface, for a given device. query_params = { \"fromDate\": \"2023-04-04 04:54:27\", \"toDate\": \"2023-04-04 05:54:27\", \"deviceAddress\" : \"10.x.x.x\", \"ifname\" : \"Ethernet0\" } res = conn.get_traffic_counters(query_params) Traffic Utilization Timeseries data of Average count of In/out link utilization of Interface, for a given device. query_params = { \"fromDate\": \"2023-04-04 04:54:27\", \"toDate\": \"2023-04-04 05:54:27\", \"deviceAddress\": \"10.x.x.x\", \"ifname\": \"Ethernet0\" } res = conn.get_traffic_util(query_params)","title":"Traffic"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Traffic/#traffic","text":"Import Client from restclient.telemetry.client import ONESClient Initialize client conn = ONESClient(\"https://10.x.x.x:443\", \"username\", \"password\") conn.connect()","title":"Traffic"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Traffic/#traffic-counters","text":"Timeseries data of Average count of In/out packets & Total count of errors & discards of Interface, for a given device. query_params = { \"fromDate\": \"2023-04-04 04:54:27\", \"toDate\": \"2023-04-04 05:54:27\", \"deviceAddress\" : \"10.x.x.x\", \"ifname\" : \"Ethernet0\" } res = conn.get_traffic_counters(query_params)","title":"Traffic Counters"},{"location":"Ones_API_For_Network_Telemetry/Secured_APIs_For_NetOps_Monitoriing/Traffic/#traffic-utilization","text":"Timeseries data of Average count of In/out link utilization of Interface, for a given device. query_params = { \"fromDate\": \"2023-04-04 04:54:27\", \"toDate\": \"2023-04-04 05:54:27\", \"deviceAddress\": \"10.x.x.x\", \"ifname\": \"Ethernet0\" } res = conn.get_traffic_util(query_params)","title":"Traffic Utilization"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/StreamingTelemetry/","text":"Streaming Telemetry This provides direct integration with ONES telemetry agent for exporting raw metrics from SONiC using standard OpenConfig models and Aviz models for advanced metrics","title":"Streaming Telemetry"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/StreamingTelemetry/#streaming-telemetry","text":"This provides direct integration with ONES telemetry agent for exporting raw metrics from SONiC using standard OpenConfig models and Aviz models for advanced metrics","title":"Streaming Telemetry"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/OnesAgent/","text":"ONES Agent A lightweight agent that can be installed on SONiC devices which latch on to the SONiC architecture to collect the critical data on the node, maintaining the integrity of the data. These data points are exported to clients such as ONES collectors or 3rd party collectors using gNMI/gRPC techniques along with the OpenConfig path. This enables ONES to be Hardware agnostic allowing it to pull vital information from any ASIC running SONiC.","title":"ONES Agent"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/OnesAgent/#ones-agent","text":"A lightweight agent that can be installed on SONiC devices which latch on to the SONiC architecture to collect the critical data on the node, maintaining the integrity of the data. These data points are exported to clients such as ONES collectors or 3rd party collectors using gNMI/gRPC techniques along with the OpenConfig path. This enables ONES to be Hardware agnostic allowing it to pull vital information from any ASIC running SONiC.","title":"ONES Agent"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/bgp_controlplanes/","text":"BGP control plane gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/network-instances/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454307\", \"timestamp\": 1679454302398028996, \"time\": \"2023-03-21T20:05:02.398028996-07:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/NOTIFICATON\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATON\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/NOTIFICATON\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATON\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/KEEPALIVE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/KEEPALIVE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/KEEPALIVE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/KEEPALIVE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/ROUTEREFRESH\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/ROUTEREFRESH\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/ROUTEREFRESH\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/ROUTEREFRESH\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/dropped-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/dropped-transitions\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/local-as\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/local-as\": 3003 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 0 } },","title":"Bgp controlplanes"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/bgp_controlplanes/#bgp-control-plane","text":"gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/network-instances/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454307\", \"timestamp\": 1679454302398028996, \"time\": \"2023-03-21T20:05:02.398028996-07:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/NOTIFICATON\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATON\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/NOTIFICATON\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATON\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/KEEPALIVE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/KEEPALIVE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/KEEPALIVE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/KEEPALIVE\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/received/ROUTEREFRESH\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/ROUTEREFRESH\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/messages/sent/ROUTEREFRESH\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/ROUTEREFRESH\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/dropped-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/dropped-transitions\": 0 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/local-as\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/local-as\": 3003 } }, { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=20.0.0.33]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 0 } },","title":"BGP control plane"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/data_models/","text":"Data Models gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify capabilities gNMI version: 1.1.0 supported models: - openconfig-bgp, OpenConfig working group, 6.1.1 - openconfig-if-ethernet,, OpenConfig working group, 2.12.0 - openconfig-lldp, OpenConfig working group, 0.2.1 - openconfig-platform-fan, OpenConfig working group, 0.1.1 - openconfig-platform-psu, OpenConfig working group, 0.2.1 - openconfig-platform-transceiver, OpenConfig working group, 0.8.0 - system/processes, Aviz Networks Inc, 0.1.0 supported encodings: - PROTO","title":"Data models"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/data_models/#data-models","text":"gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify capabilities gNMI version: 1.1.0 supported models: - openconfig-bgp, OpenConfig working group, 6.1.1 - openconfig-if-ethernet,, OpenConfig working group, 2.12.0 - openconfig-lldp, OpenConfig working group, 0.2.1 - openconfig-platform-fan, OpenConfig working group, 0.1.1 - openconfig-platform-psu, OpenConfig working group, 0.2.1 - openconfig-platform-transceiver, OpenConfig working group, 0.8.0 - system/processes, Aviz Networks Inc, 0.1.0 supported encodings: - PROTO","title":"Data Models"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/device_interface/","text":"Device interfaces gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/interfaces/interface/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679453426\", \"timestamp\": 1679453419863002971, \"time\": \"2023-03-21T19:50:19.863002971-07:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet212]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"up\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/ethernet/state/port-speed\", \"values\": { \"interfaces/interface/ethernet/state/port-speed\": \"ETHERNET_SPEED::SPEED_100GB\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"down\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/fec-mode\", \"values\": { \"interfaces/interface/state/fec-mode\": \"INTERFACE_FEC::FEC_DISABLED\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/ifindex\", \"values\": { \"interfaces/interface/state/ifindex\": 27 } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/mtu\", \"values\": { \"interfaces/interface/state/mtu\": 9100 } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/lanes\", \"values\": { \"interfaces/interface/state/lanes\": \"221,222\" } },","title":"Device interface"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/device_interface/#device-interfaces","text":"gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/interfaces/interface/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679453426\", \"timestamp\": 1679453419863002971, \"time\": \"2023-03-21T19:50:19.863002971-07:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet212]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"up\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/ethernet/state/port-speed\", \"values\": { \"interfaces/interface/ethernet/state/port-speed\": \"ETHERNET_SPEED::SPEED_100GB\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"down\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/fec-mode\", \"values\": { \"interfaces/interface/state/fec-mode\": \"INTERFACE_FEC::FEC_DISABLED\" } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/ifindex\", \"values\": { \"interfaces/interface/state/ifindex\": 27 } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/mtu\", \"values\": { \"interfaces/interface/state/mtu\": 9100 } }, { \"Path\": \"interfaces/interface[name=Ethernet212]/state/lanes\", \"values\": { \"interfaces/interface/state/lanes\": \"221,222\" } },","title":"Device interfaces"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmiClient/","text":"GNMI Clients Download and Install gnmic To install run: bash -c \"$(curl -sL https://get-gnmic.openconfig.net)\" To get the version run: gnmi_stuff$ gnmic version Output: version : 0.27.0 commit : cc5759c date : 2022-10-10T06:40:26Z gitURL : https://github.com/openconfig/gnmic docs : https://gnmic.openconfig.ne","title":"GNMI Clients"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmiClient/#gnmi-clients","text":"","title":"GNMI Clients"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmiClient/#download-and-install-gnmic","text":"To install run: bash -c \"$(curl -sL https://get-gnmic.openconfig.net)\" To get the version run: gnmi_stuff$ gnmic version Output: version : 0.27.0 commit : cc5759c date : 2022-10-10T06:40:26Z gitURL : https://github.com/openconfig/gnmic docs : https://gnmic.openconfig.ne","title":"Download and Install gnmic"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmic_open_config_path_system_resouerces/","text":"GNMI Open Config Path Subscriptions System Resources gnmic -a 10.4.4.61::50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/system/processes/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454364\", \"timestamp\": 1679454358297960118, \"time\": \"2023-03-21T20:05:58.297960118-07:00\", \"updates\": [ { \"Path\": \"system/processes/process[pid=47]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 47 } }, { \"Path\": \"system/processes/process[pid=47]/state/name\", \"values\": { \"system/processes/process/state/name\": \"ae6a64f24a2d|syncd\" } }, { \"Path\": \"system/processes/process[pid=47]/state/cpu-utilization\", \"values\": { \"system/processes/process/state/cpu-utilization\": 7 } }, { \"Path\": \"system/processes/process[pid=47]/state/memory-usage\", \"values\": { \"system/processes/process/state/memory-usage\": 890241024 } }, { \"Path\": \"system/processes/process[pid=47]/state/memory-utilization\", \"values\": { \"system/processes/process/state/memory-utilization\": 5 } }, { \"Path\": \"system/processes/process[pid=12]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 12 } }, { \"Path\": \"system/processes/process[pid=12]/state/name\", \"values\": { \"system/processes/process/state/name\": \"cc982c3fba68|teamd\" } }, { \"Path\": \"system/processes/process[pid=12]/state/cpu-utilization\", \"values\": { \"system/processes/process/state/cpu-utilization\": 0 } }, { \"Path\": \"system/processes/process[pid=12]/state/memory-usage\", \"values\": { \"system/processes/process/state/memory-usage\": 31572623 } }, { \"Path\": \"system/processes/process[pid=12]/state/memory-utilization\", \"values\": { \"system/processes/process/state/memory-utilization\": 0 } }, { \"Path\": \"system/processes/process[pid=41]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 41 } }","title":"GNMI Open Config Path Subscriptions"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmic_open_config_path_system_resouerces/#gnmi-open-config-path-subscriptions","text":"","title":"GNMI Open Config Path Subscriptions"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/gnmic_open_config_path_system_resouerces/#system-resources","text":"gnmic -a 10.4.4.61::50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/system/processes/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454364\", \"timestamp\": 1679454358297960118, \"time\": \"2023-03-21T20:05:58.297960118-07:00\", \"updates\": [ { \"Path\": \"system/processes/process[pid=47]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 47 } }, { \"Path\": \"system/processes/process[pid=47]/state/name\", \"values\": { \"system/processes/process/state/name\": \"ae6a64f24a2d|syncd\" } }, { \"Path\": \"system/processes/process[pid=47]/state/cpu-utilization\", \"values\": { \"system/processes/process/state/cpu-utilization\": 7 } }, { \"Path\": \"system/processes/process[pid=47]/state/memory-usage\", \"values\": { \"system/processes/process/state/memory-usage\": 890241024 } }, { \"Path\": \"system/processes/process[pid=47]/state/memory-utilization\", \"values\": { \"system/processes/process/state/memory-utilization\": 5 } }, { \"Path\": \"system/processes/process[pid=12]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 12 } }, { \"Path\": \"system/processes/process[pid=12]/state/name\", \"values\": { \"system/processes/process/state/name\": \"cc982c3fba68|teamd\" } }, { \"Path\": \"system/processes/process[pid=12]/state/cpu-utilization\", \"values\": { \"system/processes/process/state/cpu-utilization\": 0 } }, { \"Path\": \"system/processes/process[pid=12]/state/memory-usage\", \"values\": { \"system/processes/process/state/memory-usage\": 31572623 } }, { \"Path\": \"system/processes/process[pid=12]/state/memory-utilization\", \"values\": { \"system/processes/process/state/memory-utilization\": 0 } }, { \"Path\": \"system/processes/process[pid=41]/state/pid\", \"values\": { \"system/processes/process/state/pid\": 41 } }","title":"System Resources"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/lldp_neighbours/","text":"LLDP neighbors gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/lldp/interfaces/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454247\", \"timestamp\": 1679454240385622169, \"time\": \"2023-03-21T20:04:00.385622169-07:00\", \"updates\": [ { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/system-name\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/system-name\": \"sonic\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/system-description\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/system-description\": \"SONiC Software Version: SONiC.4.0.3-Enterprise_Base - HwSku: DellEMC-S5248f-P-25G-DPB - Distribution: Debian 10.13 - Kernel: 4.19.0-9-2-amd64\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/chassis-id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/chassis-id\": \"0c:d5:48:a0:00:00\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/chassis-id-type\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type\": \"MAC_ADDRESS\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/id\": \"1095\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/port-id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/port-id\": \"eth0\" } },","title":"Lldp neighbours"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/lldp_neighbours/#lldp-neighbors","text":"gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \u201c/lldp/interfaces/\u201c --stream-mode sample --sample-interval 10s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679454247\", \"timestamp\": 1679454240385622169, \"time\": \"2023-03-21T20:04:00.385622169-07:00\", \"updates\": [ { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/system-name\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/system-name\": \"sonic\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/system-description\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/system-description\": \"SONiC Software Version: SONiC.4.0.3-Enterprise_Base - HwSku: DellEMC-S5248f-P-25G-DPB - Distribution: Debian 10.13 - Kernel: 4.19.0-9-2-amd64\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/chassis-id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/chassis-id\": \"0c:d5:48:a0:00:00\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/chassis-id-type\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type\": \"MAC_ADDRESS\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/id\": \"1095\" } }, { \"Path\": \"lldp/interfaces/interface[name=eth0]/neighbors/neighbor[name=1095]/state/port-id\", \"values\": { \"lldp/interfaces/interface/neighbors/neighbor/state/port-id\": \"eth0\" } },","title":"LLDP neighbors"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/platform_peripherals/","text":"Platform peripherals gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \"components/component\" --stream-mode sample --sample-interval 100s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679453218\", \"timestamp\": 1679453211742825610, \"time\": \"2023-03-21T19:46:51.74282561-07:00\", \"updates\": [ { \"Path\": \"components/component[name=FAN-2R]/state/removable\", \"values\": { \"components/component/state/removable\": true } }, { \"Path\": \"components/component[name=FAN-2R]/state/oper-status\", \"values\": { \"components/component/state/oper-status\": \"COMPONENT_OPER_STATUS::ACTIVE\" } }, { \"Path\": \"components/component[name=FAN-2R]/state/empty\", \"values\": { \"components/component/state/empty\": false } },","title":"Platform peripherals"},{"location":"Ones_API_For_Network_Telemetry/Streaming_Telemetry/ONES_AGENT/platform_peripherals/#platform-peripherals","text":"gnmic -a 10.4.4.61:50052 -u admin -p YourPaSsWoRd --skip-verify subscribe --path \"components/component\" --stream-mode sample --sample-interval 100s --qos 0 Output: { \"source\": \"10.4.4.61:50052\", \"subscription-name\": \"default-1679453218\", \"timestamp\": 1679453211742825610, \"time\": \"2023-03-21T19:46:51.74282561-07:00\", \"updates\": [ { \"Path\": \"components/component[name=FAN-2R]/state/removable\", \"values\": { \"components/component/state/removable\": true } }, { \"Path\": \"components/component[name=FAN-2R]/state/oper-status\", \"values\": { \"components/component/state/oper-status\": \"COMPONENT_OPER_STATUS::ACTIVE\" } }, { \"Path\": \"components/component[name=FAN-2R]/state/empty\", \"values\": { \"components/component/state/empty\": false } },","title":"Platform peripherals"},{"location":"Ones_APIs_For_Orchestration/Overview/","text":"Overview ONES Fabric Manager will provide northbound API for 1. Day 1 Orchestration, Validate and Verification 2. Day 2 NetOps Operations","title":"Overview"},{"location":"Ones_APIs_For_Orchestration/Overview/#overview","text":"ONES Fabric Manager will provide northbound API for 1. Day 1 Orchestration, Validate and Verification 2. Day 2 NetOps Operations","title":"Overview"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/","text":"Day 1 Orchestration example This illustration demonstrates the deployment of the configuration using an intent-based YAML template, while also offering a practical instance of checking the status of the intent operation. Importing ONES Fabric Manager Agent from restclient.orchestration.client import FMClient Setting Up connection conn = FMClient(url = \"http://10.x.x.x:<port_number>\") #usually <port_number> will be 8787 Deploy Config This method takes Yaml file as input, and will be used by the fabric manager to orchestrate the network. There are pre-validated templates for various data center fabric deployments using SONiC, listed below. Yaml templates can be found here BGP-IP-CLOS DCL-L2-VXLAN-EVPN-MC LAG DCL-L3-VXLAN-EVPN-Sym-IRB DCL-L3-VXLAN-EVPN-Asym-IRB # Deploy Config file = \"<Path of Yaml file>\" result = conn.day1_intent_ovd_template(file) Intent Status This method retrieve Generic Intent Status for provisioning on SONiC enabled fabric switches . This method allows network operators to get the status of orchestration progress on a specific switch in SONiC fabric enrolled with ONES application. result = conn.get_intent_status() Note - Day 1 orchestration calls are synchronous. We need to await the command's completion status, determined using get_intent_status() , before proceeding with any subsequent commands.","title":"Day 1 Orchestration example"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#day-1-orchestration-example","text":"This illustration demonstrates the deployment of the configuration using an intent-based YAML template, while also offering a practical instance of checking the status of the intent operation.","title":"Day 1 Orchestration example"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#importing-ones-fabric-manager-agent","text":"from restclient.orchestration.client import FMClient","title":"Importing ONES Fabric Manager Agent"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#setting-up-connection","text":"conn = FMClient(url = \"http://10.x.x.x:<port_number>\") #usually <port_number> will be 8787","title":"Setting Up connection"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#deploy-config","text":"This method takes Yaml file as input, and will be used by the fabric manager to orchestrate the network. There are pre-validated templates for various data center fabric deployments using SONiC, listed below. Yaml templates can be found here BGP-IP-CLOS DCL-L2-VXLAN-EVPN-MC LAG DCL-L3-VXLAN-EVPN-Sym-IRB DCL-L3-VXLAN-EVPN-Asym-IRB # Deploy Config file = \"<Path of Yaml file>\" result = conn.day1_intent_ovd_template(file)","title":"Deploy Config"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#intent-status","text":"This method retrieve Generic Intent Status for provisioning on SONiC enabled fabric switches . This method allows network operators to get the status of orchestration progress on a specific switch in SONiC fabric enrolled with ONES application. result = conn.get_intent_status()","title":"Intent Status"},{"location":"Ones_APIs_For_Orchestration/Day_1_Orchestration/Day1Orchestration/#note-","text":"Day 1 orchestration calls are synchronous. We need to await the command's completion status, determined using get_intent_status() , before proceeding with any subsequent commands.","title":"Note -"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/","text":"Day2 Operations example This illustration demonstrates various day 2 operations such as backup&restore, compare config, image upgrade, reboot a device etc. Importing ONES Fabric Manager Agent from restclient.orchestration.client import FMClient import json Setting Up connection conn = FMClient(url = \"http://192.168.x.x:<port_number>\") #usually <port_number> will be 8787 Backup on Config payload = [{\"ip\":\"192.168.x.x\",\"label\":\"test_backup\"}] result = conn.backup_on_config(payload) Get all backups payload = [\"192.168.x.1\",\"192.168.x.2\"] result = conn.backups(payload) Restore Config payload = [ {\"ip\":\"192.168.x.1\",\"timestamp\":\"USERINPUT\"}, {\"ip\":\"192.168.x.2\",\"timestamp\":\"USERINPUT\"} ] result = conn.restore_config(payload) Custom Image upgrade To Trigger custom Image upgrade request payload_for_image_upgrade = [{\"ip\":\"<ip address>\",\"pathToImage\":\"<image path>\"}] ## 'image path' example: http://192.168.0.2:8192/home/NOS.bin result = conn.custom_image_upgrade(payload_for_image_upgrade) ZTP enable / Image Upgrade To Trigger the ZTP, it take one or more device IPs as input payload = [\"192.168.x.1\", \"192.168.x.2\"] result = conn.ztp_enable(payload) # list of IPs Get Config Difference To get the data to show in config diff in UI payload_for_config_diff = { \"ip\": \"192.168.x.x\"} result = conn.get_config_diff(payload_for_config_diff) Get Controller version print(\"Controller Version ->\") result = conn.get_controller_version() Get management operation status of images payload can be single IP, or list of IPs payload = [\"192.168.x.x\"] status = conn.get_image_mgmnt_status(payload) print(json.dumps(status, indent= 4)) Reboot a device Only single ip should be pass at a time payload = [\"192.168.x.x\"] result = conn.reboot(payload) Get controller / Fabric Manager version result = conn.controller_fm_version() ### Note - The API calls Day2FM are synchronous, meaning we have to wait for one API call to complete successfully or fail before proceeding. To ensure proper synchronization, it is advisable to call the function get_image_mgmnt_status() after each API call. This function will provide the values for the device_action field, which, in turn, will allow us to determine the status of an image based on the status field. device_action = 0 Failed device_action = 1 Device is Free, can take any action device_action = 2 image management operations in progress (custom/zip) device_action = 3 reboot is in progress","title":"Day2 Operations example"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#day2-operations-example","text":"This illustration demonstrates various day 2 operations such as backup&restore, compare config, image upgrade, reboot a device etc.","title":"Day2 Operations example"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#importing-ones-fabric-manager-agent","text":"from restclient.orchestration.client import FMClient import json","title":"Importing ONES Fabric Manager Agent"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#setting-up-connection","text":"conn = FMClient(url = \"http://192.168.x.x:<port_number>\") #usually <port_number> will be 8787","title":"Setting Up connection"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#backup-on-config","text":"payload = [{\"ip\":\"192.168.x.x\",\"label\":\"test_backup\"}] result = conn.backup_on_config(payload)","title":"Backup on Config"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#get-all-backups","text":"payload = [\"192.168.x.1\",\"192.168.x.2\"] result = conn.backups(payload)","title":"Get all backups"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#restore-config","text":"payload = [ {\"ip\":\"192.168.x.1\",\"timestamp\":\"USERINPUT\"}, {\"ip\":\"192.168.x.2\",\"timestamp\":\"USERINPUT\"} ] result = conn.restore_config(payload)","title":"Restore Config"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#custom-image-upgrade","text":"To Trigger custom Image upgrade request payload_for_image_upgrade = [{\"ip\":\"<ip address>\",\"pathToImage\":\"<image path>\"}] ## 'image path' example: http://192.168.0.2:8192/home/NOS.bin result = conn.custom_image_upgrade(payload_for_image_upgrade)","title":"Custom Image upgrade"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#ztp-enable-image-upgrade","text":"To Trigger the ZTP, it take one or more device IPs as input payload = [\"192.168.x.1\", \"192.168.x.2\"] result = conn.ztp_enable(payload) # list of IPs","title":"ZTP enable / Image Upgrade"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#get-config-difference","text":"To get the data to show in config diff in UI payload_for_config_diff = { \"ip\": \"192.168.x.x\"} result = conn.get_config_diff(payload_for_config_diff)","title":"Get Config Difference"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#get-controller-version","text":"print(\"Controller Version ->\") result = conn.get_controller_version()","title":"Get Controller version"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#get-management-operation-status-of-images","text":"payload can be single IP, or list of IPs payload = [\"192.168.x.x\"] status = conn.get_image_mgmnt_status(payload) print(json.dumps(status, indent= 4))","title":"Get management operation status of images"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#reboot-a-device","text":"Only single ip should be pass at a time payload = [\"192.168.x.x\"] result = conn.reboot(payload)","title":"Reboot a device"},{"location":"Ones_APIs_For_Orchestration/Day_2_NetOps/#get-controller-fabric-manager-version","text":"result = conn.controller_fm_version() ### Note - The API calls Day2FM are synchronous, meaning we have to wait for one API call to complete successfully or fail before proceeding. To ensure proper synchronization, it is advisable to call the function get_image_mgmnt_status() after each API call. This function will provide the values for the device_action field, which, in turn, will allow us to determine the status of an image based on the status field. device_action = 0 Failed device_action = 1 Device is Free, can take any action device_action = 2 image management operations in progress (custom/zip) device_action = 3 reboot is in progress","title":"Get controller / Fabric Manager version"}]}